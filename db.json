{"problems": [
  {
    "id": 1,
    "title": "Two Sum",
    "url": "https://leetcode.com/problems/two-sum/description",
    "companyTags": [
      "Facebook",
      "Microsoft",
      "Amazon",
      "Bloomberg",
      "Uber",
      "LinkedIn",
      "Apple",
      "Airbnb",
      "Yelp",
      "Yahoo",
      "Adobe",
      "Dropbox"
    ],
    "difficulty": "Easy",
    "content": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\r\n\r\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\r\n\r\n\r\nExample:\r\n\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[0] + nums[1] = 2 + 7 = 9,\r\nreturn [0, 1].\r\n\r\n",
    "discussUrl": "https://discuss.leetcode.com/category/9",
    "similarQuestions": [
      "3Sum",
      "4Sum",
      "TwoSumII-Inputarrayissorted",
      "TwoSumIII-Datastructuredesign",
      "SubarraySumEqualsK",
      "TwoSumIV-InputisaBST"
    ],
    "topicTags": [
      "Array",
      "HashTable"
    ],
    "Solution": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] map = new int[20050];\n        int size = 4;\n        for (int i = 0; i < nums.length; i++) {\n            map[nums[i] + size] = (i + 1);\n            int diff = target - nums[i + 1] + size;\n            if (diff < 0) continue;\n            int d = map[diff];\n            if (d > 0)\n                return new int[]{d - 1, i + 1};\n        }\n        return null;\n    }\n}",
    "total_acs": 796356,
    "total_submitted": 2141916
  },
  {
    "id": 2,
    "title": "Add Two Numbers",
    "url": "https://leetcode.com/problems/add-two-numbers/description",
    "companyTags": [
      "Microsoft",
      "Amazon",
      "Bloomberg",
      "Airbnb",
      "Adobe"
    ],
    "difficulty": "Medium",
    "content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\r\n\r\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\r\n\r\n\r\nExample\r\n\r\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\r\nOutput: 7 -> 0 -> 8\r\nExplanation: 342 + 465 = 807.\r\n\r\n",
    "discussUrl": "https://discuss.leetcode.com/category/10",
    "similarQuestions": [
      "MultiplyStrings",
      "AddBinary",
      "SumofTwoIntegers",
      "AddStrings",
      "AddTwoNumbersII"
    ],
    "topicTags": [
      "LinkedList",
      "Math"
    ],
    "Solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        if (l1 == null && l2 == null)\n            return null;\n        \n\n        ListNode sum_head = null;\n        ListNode sum_tail = null;\n        \n        int carry = 0;\n        \n        while (l1 !=null && l2!=null) {\n            int s = l1.val + l2.val + carry;\n            carry = s / 10;\n            int value = s % 10;\n            \n            if (sum_head == null) {\n                sum_head = new ListNode(value);\n                sum_tail = sum_head;\n            } else {\n                sum_tail.next = new ListNode(value);\n                sum_tail = sum_tail.next;\n            }\n            \n            l1 = l1.next;\n            l2 = l2.next;\n        }\n        \n        ListNode longest = null;\n        if (l1 != null) {\n            longest = l1;\n        }\n        else if (l2!= null) {\n            longest = l2;\n        } \n\n        while (longest !=null) {\n            int s = longest.val + carry;\n            carry = s / 10;\n            int value = s % 10;\n            \n            if (sum_head == null) {\n                sum_head = new ListNode(value);\n                sum_tail = sum_head;\n            } else {\n                sum_tail.next = new ListNode(value);\n                sum_tail = sum_tail.next;\n            }\n            \n            longest = longest.next;\n        }\n        \n            if (carry != 0) {\n                sum_tail.next = new ListNode(carry);\n                return sum_head;\n            }\n        \n        return sum_head;\n    }\n}",
    "total_acs": 437738,
    "total_submitted": 1539475
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters/description",
    "companyTags": [
      "Amazon",
      "Bloomberg",
      "Yelp",
      "Adobe"
    ],
    "difficulty": "Medium",
    "content": "Given a string, find the length of the longest substring without repeating characters.\r\n\r\nExamples:\r\n\r\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\r\n\r\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\r\n\r\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
    "discussUrl": "https://discuss.leetcode.com/category/11",
    "similarQuestions": [
      "LongestSubstringwithAtMostTwoDistinctCharacters"
    ],
    "topicTags": [
      "HashTable",
      "TwoPointers",
      "String"
    ],
    "Solution": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        char[] chars = s.toCharArray();\n        if(2 > chars.length){\n            return chars.length;\n        }\n        int max = 0;\n        int split_at = 0;\n        int cur_len = 1;\n        for(int i=1;i<chars.length;i++){\n            int j = split_at;\n            for(;j<i;j++){\n                if(chars[i] == chars[j]){\n                    break;\n                }\n            }\n            if(j < i){\n                split_at = j+1;\n                cur_len = i-j;\n            }else{\n                cur_len++;\n            }\n            if(cur_len > max) max = cur_len;\n        }\n        return max;\n    }\n}",
    "total_acs": 433147,
    "total_submitted": 1759425
  },
  {
    "id": 6,
    "title": "ZigZag Conversion",
    "url": "https://leetcode.com/problems/zigzag-conversion/description",
    "companyTags": [
      ""
    ],
    "difficulty": "Medium",
    "content": "\r\nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\r\n\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n\r\n\r\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\r\n\r\n\r\nWrite the code that will take a string and make this conversion given a number of rows:\r\n\r\nstring convert(string text, int nRows);\r\n\r\nconvert(\"PAYPALISHIRING\", 3) should return \"PAHNAPLSIIGYIR\".\r\n",
    "discussUrl": "https://discuss.leetcode.com/category/14",
    "similarQuestions": [
      ""
    ],
    "topicTags": [
      "String"
    ],
    "Solution": "class Solution {\n    public String convert(String s, int numRows) {\n        if (s == null || numRows <= 1 || s.length() <= numRows) return s;\n        int len = s.length();\n        char[] source = s.toCharArray();\n        char[] dest = new char[len];\n        int step = 2 * numRows - 2;\n        int k = 0;\n        for (int i = 0; i < len; i += step) {\n            dest[k++] = source[i];\n        }\n        for (int i = 1; i < numRows - 1; ++i) {\n            int j = i;\n            int otherJ = j + step - 2 * i;\n            while (j < len && otherJ < len) {\n                dest[k++] = source[j];\n                dest[k++] = source[otherJ];\n                j += step;\n                otherJ += step;\n            }\n            if (j < len)\n                dest[k++] = source[j];\n        }\n        for (int i = numRows - 1; i < len; i += step) {\n            dest[k++] = source[i];\n        }\n        return String.valueOf(dest);\n    }\n}",
    "total_acs": 193863,
    "total_submitted": 713528
  },
  {
    "id": 7,
    "title": "Reverse Integer",
    "url": "https://leetcode.com/problems/reverse-integer/description",
    "companyTags": [
      "Bloomberg",
      "Apple"
    ],
    "difficulty": "Easy",
    "content": "Given a 32-bit signed integer, reverse digits of an integer.\r\n\r\nExample 1:\r\n\r\nInput: 123\r\nOutput:  321\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: -123\r\nOutput: -321\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: 120\r\nOutput: 21\r\n\r\n\r\n\r\nNote:\r\nAssume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\r\n",
    "discussUrl": "https://discuss.leetcode.com/category/15",
    "similarQuestions": [
      "StringtoInteger(atoi)"
    ],
    "topicTags": [
      "Math"
    ],
    "Solution": "class Solution {\n    public int reverse(int x) {\n        int output = 0;\n        \n        while (true) {\n            if (x == 0) {\n                return x;\n            }\n            \n            output = output * 10 + x % 10;\n            \n            if ((x /= 10) == 0) {\n                return output;\n            }\n            \n            if (output > 214748364 || output < -214748364) {\n                return 0;\n            }\n        }\n    }\n}",
    "total_acs": 361356,
    "total_submitted": 1480038
  }
]}
